package dev.byflow.customtntflow.util;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Minimal JSON parser tailored for the trait snapshots generated by the registry.
 */
public final class TraitSnapshotParser {

    public Map<String, Object> parse(String json) {
        if (json == null) {
            throw new IllegalArgumentException("json");
        }
        Parser parser = new Parser(json);
        Map<String, Object> result = parser.parseObject();
        parser.skipWhitespace();
        if (!parser.isEof()) {
            throw new IllegalArgumentException("Unexpected trailing data in traits snapshot");
        }
        return result;
    }

    private static final class Parser {

        private final String input;
        private int index;

        private Parser(String input) {
            this.input = input;
        }

        Map<String, Object> parseObject() {
            skipWhitespace();
            expect('{');
            Map<String, Object> map = new LinkedHashMap<>();
            skipWhitespace();
            if (peek() == '}') {
                index++;
                return map;
            }
            while (true) {
                skipWhitespace();
                String key = parseString();
                skipWhitespace();
                expect(':');
                skipWhitespace();
                Object value = parseValue();
                map.put(key, value);
                skipWhitespace();
                char ch = peek();
                if (ch == ',') {
                    index++;
                    continue;
                }
                if (ch == '}') {
                    index++;
                    break;
                }
                throw new IllegalArgumentException("Expected ',' or '}' in traits snapshot");
            }
            return map;
        }

        private Object parseValue() {
            char ch = peek();
            if (ch == '"') {
                return parseString();
            }
            if (ch == '[') {
                return parseArray();
            }
            if (ch == 't' || ch == 'f') {
                return parseBoolean();
            }
            if ((ch >= '0' && ch <= '9') || ch == '-' || ch == '+') {
                return parseNumber();
            }
            throw new IllegalArgumentException("Unsupported value in traits snapshot: " + ch);
        }

        private List<Object> parseArray() {
            expect('[');
            List<Object> list = new ArrayList<>();
            skipWhitespace();
            if (peek() == ']') {
                index++;
                return list;
            }
            while (true) {
                skipWhitespace();
                Object value = parseValue();
                list.add(value);
                skipWhitespace();
                char ch = peek();
                if (ch == ',') {
                    index++;
                    continue;
                }
                if (ch == ']') {
                    index++;
                    break;
                }
                throw new IllegalArgumentException("Expected ',' or ']' in array");
            }
            return list;
        }

        private Boolean parseBoolean() {
            if (match("true")) {
                return Boolean.TRUE;
            }
            if (match("false")) {
                return Boolean.FALSE;
            }
            throw new IllegalArgumentException("Invalid boolean value in traits snapshot");
        }

        private Number parseNumber() {
            int start = index;
            if (peek() == '+' || peek() == '-') {
                index++;
            }
            while (!isEof()) {
                char ch = peek();
                if ((ch >= '0' && ch <= '9') || ch == '.' || ch == 'e' || ch == 'E') {
                    index++;
                } else {
                    break;
                }
            }
            String token = input.substring(start, index);
            if (token.contains(".") || token.contains("e") || token.contains("E")) {
                return Double.parseDouble(token);
            }
            return Long.parseLong(token);
        }

        private String parseString() {
            expect('"');
            StringBuilder sb = new StringBuilder();
            while (!isEof()) {
                char ch = input.charAt(index++);
                if (ch == '"') {
                    break;
                }
                if (ch == '\\') {
                    if (isEof()) {
                        throw new IllegalArgumentException("Unterminated escape sequence in string");
                    }
                    char escaped = input.charAt(index++);
                    switch (escaped) {
                        case '"' -> sb.append('"');
                        case '\\' -> sb.append('\\');
                        case '/' -> sb.append('/');
                        case 'b' -> sb.append('\b');
                        case 'f' -> sb.append('\f');
                        case 'n' -> sb.append('\n');
                        case 'r' -> sb.append('\r');
                        case 't' -> sb.append('\t');
                        case 'u' -> {
                            if (index + 4 > input.length()) {
                                throw new IllegalArgumentException("Invalid unicode escape in string");
                            }
                            String hex = input.substring(index, index + 4);
                            index += 4;
                            sb.append((char) Integer.parseInt(hex, 16));
                        }
                        default -> throw new IllegalArgumentException("Unsupported escape in string: \\" + escaped);
                    }
                    continue;
                }
                sb.append(ch);
            }
            return sb.toString();
        }

        private boolean match(String token) {
            if (input.regionMatches(index, token, 0, token.length())) {
                index += token.length();
                return true;
            }
            return false;
        }

        private void expect(char expected) {
            if (isEof() || input.charAt(index) != expected) {
                throw new IllegalArgumentException("Expected '" + expected + "' in traits snapshot");
            }
            index++;
        }

        private char peek() {
            if (isEof()) {
                return '\0';
            }
            return input.charAt(index);
        }

        private void skipWhitespace() {
            while (!isEof()) {
                char ch = input.charAt(index);
                if (ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t') {
                    index++;
                } else {
                    break;
                }
            }
        }

        private boolean isEof() {
            return index >= input.length();
        }
    }
}
